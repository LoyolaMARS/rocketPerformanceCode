## Rocket calculations in python, design by Harrison Leece and Bailey Page## Objective: Characterize the motion of a rocket given certain##            values using numerical methods.## Debugged by Matt Abel, Max Fungimport mathimport numpy as npfrom rocketRK4_B import RK4import matplotlib.pyplot as plt# Inputs# gravity, isp, atmosphere and thrust are assumed constant# Units of mass should be in slug for imperial and kg for metricgravity = 32.2mass = (1500/gravity)#initialMass variable allows the mass of the rocket to be reset durring outer for loopinitialMass = mass#Typical pressure-fed systems have a propellant weight to total weight ratio of# .89  .80 is selected to be conservativepropellantMass = .85 * massfinalMass = mass - propellantMass#Kerosene LOX has a theoretical max ISP of ~360.  F1 engine is 263 ISP at sea level#Therefore, an ISP of 260 at average altitude is possibleisp = 260Area = 3.1416 * 1/4 * 1# A Supersonic fighter has a Cd of .016.  Subsonic is .012# A rocket = .05 if aerodynamics are done wellCd = .05#Step size of calculations.  Smaller number = higher precision#Unit is secondsstepSize = .005# Passes curren time 'step' conditions to RK4 function# Returns the next time 'step' conditions.# Eqaution is modified in RK4.py filerange_thrust=range(0,5001,1000)print(range_thrust)for thrust in range_thrust:    #Generally, do not change these.  Describes initial conditions and    #initializes the variables    t=0    v=0    x = 0    rho=0    burnOutTime = 0    burnOutVelocity = 0    currentVelocity = 0        mass = initialMass    print('\nTHRUST TESTED: ' +str(thrust))    #Establishes mDot from thrust, gravity and isp    mDot = thrust/(gravity * isp)    print(thrust)    print(mDot)    while (True):        # Calculates atmospheric density at altitude x and passes density to RK4 fxn        rho= (4.2029*10**-29)*x**5 -(9.9848*10**-24)*x**4 - (1.4468*10**-18)*x**3 + (6.4581*10**-13)*x**2 - (6.7718*10**-8)*x + (2.3770*10**-3)                v = RK4(t,v, mass, finalMass, Cd, thrust, mDot, gravity, Area, stepSize, rho)                ####print('check 0')                if v > 0:            if (mass > finalMass):                mass = mass - mDot * stepSize                burnOutTime = t                burnOutVelocity = v                            else:                #Leave this for clarity, though redundant                mass = mass            #Computes current displacement            x = x + ((currentVelocity + v)/2 * stepSize)            currentVelocity = v            #steps the while loop forward in time            ####print('check' + str(t))            t = t + stepSize            #print(x)                               else:            break    print('Burnout at ' + str(burnOutTime) + ' feet') ## Should the units here be seconds? Time not distance?     print('Burnout velocity ' + str(burnOutVelocity) + ' feet/seconds' )    print("Time to apopapsis: " + str(t))    print('Displacement '+ str(x) + ' feet') #Added the label of displacement here... displacement or altitude?    print("Goal displacement = " + str(5280 * 63) + "Feet ")            